# Copyright [2018] [Phil Chen]
# Copyright [2019] [Caglar Ulucenk]
# Copyright [2019] [Alicia Smith] * Added multiple inputs 
# drawing from inspiration here:
# https://github.com/tooltwist/codepipeline-artifact-munge

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#    http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This template is for use when you are drawing from a single GitHub repo.

AWSTemplateFormatVersion: 2010-09-09

Description: 'This solution allows you to create a AWS Codepipline for deploying a serverless application with AWS CodeBuild triggered by a Github repo commit. The setup of this solution is fully automated via a CloudFormation template.'

Parameters:
  ProjectName:
    Description: Name of the project, or the framework. Ensure this matches the value in your buildspec.
    Type: String
    Default: MozDef-EF
    ConstraintDescription: "Only a mix of letters, numbers, underscores, and dashes are allowed."

  Environment:
    AllowedValues:
    - dev
    - stg
    - prod
    Description: Environment
    Type: String
    Default: dev

  Service:
    Description: The name of the service/external resource that will utilise this pipeline, e.g. zoom2mozdef.
    Type: String
    Default: template
    ConstraintDescription: "Service names can be any valid combination of letters, numbers, underscores, and dashes."

  EventSourceType:
    AllowedValues:
      - push
      - pull
    Description: The type/means of event source to emit. Valid values are "push" (e.g. a webhook) or "pull" (e.g. an API).
    Type: String
    Default: push
  
  SSMParamName:
    Description: The parameter name you stored in SSM for your auth token.
    Type: String
    Default: /<project>/<service>/<environment>/auth_token
    ConstraintDescription: "Only a mix of letters, numbers and the following symbols /.-_ are allowed."

  # Removed personal access token parameter as 
  # it is accessed from AWS Secrets Manager
  GHRepo:
    Type: String
    Description: A public or private Github repository to be used as the source, in the form of "owner/repository/branch".

  GHTokenReference:
    Description: The name of the token as secret, as it is stored in AWS Secrets Manager. See default value as an example.
    Type: String
    Default: <project>/<service>/<environment>/codepipeline/github

# This helps grouping similar parameters together when deploying via AWS Console
Metadata:
  Source: https://github.com/mozilla/mozdef-event-framework/blob/master/templates/codepipeline-cf-template-github-source.yml
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Pipeline Configuration"
        Parameters:
          - ProjectName
          - Service
          - EventSourceType
          - Environment
          - SSMParamName
      - Label:
          default: "Source (GitHub) Configuration"
        Parameters:
          - GHRepo
          - GHTokenReference

Resources:

  # CODEBUILD ROLE
  CBRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["CBRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: "Allow"
          Principal:
            Service: "codebuild.amazonaws.com"
          Action: "sts:AssumeRole"

  # CODEBUILD POLICY
  CBPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["CBPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'codebuild:*'
            Resource: !GetAtt TestBuildDeploy.Arn
          - Effect: Allow
            Action:
              - 'cloudformation:ListChangeSets'
              - 'cloudformation:ListStackResources'
              - 'cloudformation:GetStackPolicy'
              - 'cloudformation:GetTemplate'
              - 'cloudformation:CreateStack'
              - 'cloudformation:DeleteStack'
              - 'cloudformation:DescribeStacks'
              - 'cloudformation:DescribeStackResources'
              - 'cloudformation:DescribeStackResource'
              - 'cloudformation:DescribeStackEvents'
              - 'cloudformation:UpdateStack'
            # Changing resource so a serverless stack can be deployed  
            Resource: !Join [ '', [ 'arn:aws:cloudformation:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "stack/*"  ] ]
          - Effect: Allow
            Action:
              - 'lambda:AddPermission'
              - 'lambda:CreateAlias'
              - 'lambda:ListAliases'
              - 'lambda:DeleteFunction'
              - 'lambda:InvokeFunction'
              - 'lambda:PublishVersion'
              - 'lambda:RemovePermission'
              - 'lambda:UpdateAlias'
              - 'lambda:UpdateFunctionCode'
              - 'lambda:UpdateFunctionConfiguration'
              - 'lambda:GetFunction'
              - 'lambda:GetFunctionConfiguration'
              - 'lambda:ListVersionsByFunction'
            Resource:
              # Giving permissions on the lambda functions created by the serverless framework, 
              # based on the assumption that serverless framework creates function names
              # based on service name and stage
              - !Join [ '', [ 'arn:aws:lambda:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "function", ':', !Ref Service, "-", !Ref Environment, "*" ] ]
          - Effect: Allow
            Action:
              - 'apigateway:GET'
              - 'apigateway:POST'
              - 'apigateway:PUT'
              - 'apigateway:DELETE'
              - 'apigateway:PATCH'
            Resource: 
              - !Join [ '', [ 'arn:aws:apigateway:', !Ref 'AWS::Region', '::', "/restapis*" ] ]
              # This is ugly but URL-encoding seems to be required for this
              - !Join [ '', [ 'arn:aws:apigateway:' , !Ref 'AWS::Region', '::', '/tags/arn%3Aaws%3Aapigateway%3A', !Ref 'AWS::Region', '%3A%3A%2F', "restapis%2F*" ] ]
          - Effect: Allow
            Action:
              - 's3:CreateBucket'
              - 's3:DeleteBucket'
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
              - 's3:PutEncryptionConfiguration'
              - 's3:GetEncryptionConfiguration'
              - 's3:GetBucketLocation'
              - 's3:PutBucketPolicy'
              - 's3:DeleteBucketPolicy'
            Resource: 
              - !GetAtt S3Pipeline.Arn
              - !Join [ '', [ 'arn:aws:s3:::', !Ref Service, '-', !Ref EventSourceType, '-', !Ref Environment, '-serverless*' ] ]
              - !Join [ '', [ !GetAtt S3Pipeline.Arn, '/*' ] ]
              - !Join [ '', [ 'arn:aws:s3:::', !Ref Service, '-', !Ref EventSourceType, '-', !Ref Environment, '-serverless*', '/*' ] ]
          - Effect: Allow
            Action:
              - 'iam:PassRole'
              - 'iam:GetRole'
              - 'iam:CreateRole'
              - 'iam:PutRolePolicy'
              - 'iam:DeleteRolePolicy'
              - 'iam:DeleteRole'
            Resource: 
              - !Join [ '', [ 'arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref Service, '-', !Ref Environment, '-', !Ref 'AWS::Region', '*' ] ]
          - Effect: Allow
            Action:
              - 'ssm:GetParameter'
              - 'ssm:GetParametersByPath'
            Resource: !Join [ '', [ 'arn:aws:ssm:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':parameter/', !Ref 'SSMParamName' ] ]
          - Effect: Allow
            Action:
              - 'ssm:AddTagsToResource'
            Resource: !Join [ '', [ 'arn:aws:ssm:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':document/*' ] ]
          - Effect: Allow
            Action:
              - 'sqs:CreateQueue'
              - 'sqs:GetQueueAttributes'
            Resource: !Join [ '', [ 'arn:aws:sqs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':*' ] ]
          - Effect: Allow
            Action:
              - 'sqs:SendMessage'
            Resource: 
              - !Join [ '', [ 'arn:aws:sqs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref ProjectName, '-', !Ref Service, '-', !Ref EventSourceType, '-', !Ref Environment ] ]
              - !Join [ '', [ 'arn:aws:sqs:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', !Ref ProjectName, '-', !Ref Service, '-', !Ref EventSourceType, '-', !Ref Environment, '-DLQ' ] ]
            # Seems like there are some permissions that are 
            # only applicable to "*" resource
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:DeleteLogGroup'
              - 'logs:DescribeLogGroups'
              - 'logs:FilterLogEvents'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
              - 'logs:DescribeLogStreams'
              - 'cloudformation:ListStacks'
              - 'cloudformation:GetTemplateSummary'
              - 'cloudformation:ValidateTemplate'
              - 'cloudformation:CreateUploadBucket'
              - 'cloudformation:DescribeAccountLimits'
              - 'cloudformation:DescribeChangeSet'
              - 'lambda:CreateFunction'
              - 'lambda:PublishLayerVersion'
              - 'lambda:ListTags'
              - 'lambda:TagResource'
              - 'lambda:UntagResource'
              - 'cloudwatch:GetMetricStatistics'
              - 'events:PutEvents'
              - 'events:PutRule'
              - 'events:PutTargets'
              - 'sqs:ListQueues'
              - 'xray:PutTraceSegments'
              - 'xray:PutTelemetryRecords'
            Resource: "*"
      Roles:
        -  !Ref CBRole

  # PIPELINE ROLE
  PLRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName:
        'Fn::Join': [ "", ["PLRole", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -  Effect: "Allow"
             Principal:
               Service: "codepipeline.amazonaws.com"
             Action: 
               - 'sts:AssumeRole'

  # PIPELINE POLICY
  PLPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName:
        'Fn::Join': [ "", ["PLPolicy", "-", !Ref 'AWS::StackName', "-", !Ref 'Environment']]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - 'logs:CreateLogGroup'
              - 'logs:CreateLogStream'
              - 'logs:PutLogEvents'
            Resource: "*"
          - Effect: Allow
            Action:
              - 's3:CreateBucket'
              - 's3:DeleteBucket'
              - 's3:ListBucket'
              - 's3:ListBucketVersions'
              - 's3:PutObject'
              - 's3:GetObject'
              - 's3:DeleteObject'
              - 's3:PutEncryptionConfiguration'
              - 's3:GetEncryptionConfiguration'
              - 's3:GetBucketLocation'
            Resource:
              - !Join [ '', [ !GetAtt S3Pipeline.Arn, '/*' ] ]
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource:
              # Giving permissions on the lambda functions created by the serverless framework, 
              # based on the assumption that serverless framework creates function names
              # based on service name and stage
              - !Join [ '', [ 'arn:aws:lambda:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "function", ':', !Ref Service, "-", !Ref Environment, "*" ] ]
          - Effect: Allow
            Action:
              - 'secretsmanager:GetSecretValue'
            Resource: !Join [ '', [ 'arn:aws:secretsmanager:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':', "secret", ':', !Ref Environment, '/codepipeline/github*' ] ]
          - Effect: Allow
            Action:
              - 'codebuild:*'
            Resource: !GetAtt TestBuildDeploy.Arn
      Roles:
        -  !Ref PLRole

  # S3 PIPELINE BUCKET  
  S3Pipeline:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: !Join [ "", [ !Ref 'AWS::StackName', "-", !Ref 'Environment', "-utility" ] ]
      Tags:
        - Key: "Project"
          Value: !Join [ "", [ !Ref 'ProjectName', "-", !Ref 'Environment' ] ]

  # CODEPIPELINE CODEBUILD DEPLOYMENT
  TestBuildDeploy:
    Type: "AWS::CodeBuild::Project"
    Properties:
      Name: !Join ["", ["Test-Build",  "-", !Ref 'AWS::StackName'] ]
      Description: CodeBuild project to test & deploy the serverless stack.
      ServiceRole: !Ref CBRole
      TimeoutInMinutes: 5
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Join [ "", ["config/buildspec", "-", !Ref 'Environment', ".yml"]]
      Environment:
        Type: "LINUX_CONTAINER"
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:2.0
      Artifacts:
        Type: CODEPIPELINE
      Tags:
        - Key: "Project"
          Value: !Join [ "", [ !Ref 'ProjectName', "-", !Ref 'Environment' ] ]

  # CODEPIPELINE STAGE DEFINITIONS
  EFPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Join [ "", ["EFPipeline", "-", !Ref 'AWS::StackName'] ]
      ArtifactStore:
        Location: !Ref S3Pipeline
        Type: S3
      RestartExecutionOnUpdate: true
      RoleArn: !GetAtt PLRole.Arn
      Stages:
        # Stage 1:  Get the source from the Github repo
        - Name: Source
          Actions:
            - Name: CodeSource
              RunOrder: 1
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              Configuration:
                Owner: !Select [0, !Split [ "/" , !Ref GHRepo ]]
                Repo: !Select [1, !Split [ "/" , !Ref GHRepo ]]
                Branch: !Select [2, !Split [ "/" , !Ref GHRepo ]]
                # Since we are not using a webhook, we need to poll
                PollForSourceChanges: true
                # Obtaining from Secrets Manager
                OAuthToken: !Join [ "", [ "{{resolve:secretsmanager:", !Ref GHTokenReference, ":SecretString:PersonalAccessToken}}" ]]
              OutputArtifacts:
                - Name: CodeSourceOutput
  
        # Stage 2:  Build using Serverless Framework
        - Name: TestBuildDeploy
          Actions:
            - Name: !Join [ "", ["TestBuildDeploy",  "-", !Ref 'AWS::StackName'] ]
              RunOrder: 2
              InputArtifacts:
                - Name: CodeSourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              Configuration:
                ProjectName:  !Ref TestBuildDeploy
              OutputArtifacts:
                - Name: Deploy-Ready

Outputs:
  CodeBuild:
    Value: !Ref EFPipeline
  Environment:
    Value: !Ref Environment
  GithubRepository:
    Value: !Ref GHRepo
  CodeBuildRole:
    Value: !Ref CBRole
  CodeBuildPolicy:
    Value: !Ref CBPolicy
  PipelineRole:
    Value: !Ref PLRole
  PipelinePolicy:
    Value: !Ref PLPolicy
  S3PipelineBucket:
    Value: !Ref S3Pipeline
